#!/usr/bin/env bash

set_download_data() {
	local file_name response api_url release_tag release_download
	local -n ptr_tag=${1}
	local -n ptr_download_url=${2}

	api_url="https://api.github.com/repos/${repo}/releases"

	if [ "$tag" = "latest" ]; then
		api_url+="/latest"
		response=$(curl -fsSL "$api_url")
		release_tag=$(jq -r '.tag_name' <<<"$response")
		file_name="${pkgname}-${release_tag}.${file_ext}"
		release_download=$(jq --arg file_name "$file_name" -r '.assets[] | select(.browser_download_url | contains($file_name)) | .browser_download_url' <<<"$response")
	else
		file_name="${pkgname}-${release_tag}.${file_ext}"
		response=$(curl -fsSL "$api_url")
		release_download=$(jq --arg release_tag "$release_tag" --arg file_name "$file_name" -r '.[] | select(.tag_name == $release_tag) | .assets[] | select(.browser_download_url | contains($file_name)) | .browser_download_url' <<<"$response")
	fi

	[ -z "$release_download" ] && throw "No download URL found for tag $(yellow_bold "$release_tag")"

	# shellcheck disable=SC2034
	ptr_tag="$release_tag"
	# shellcheck disable=SC2034
	ptr_download_url="$release_download"
}

install() {
	local download_url=$1
	local workdir=$2
	local zipfile=$3

	sudo mkdir -p "$workdir"
	sudo chmod -R 777 "$workdir"
	trap 'sudo rm -rf $workdir' EXIT

	sudo curl -fsSL "$download_url" -o "$zipfile"
	sudo unzip -q "$zipfile" -d "$install_dir/"
	$pkgname self create
}

show_help() {
	cat <<EOF

Usage:
  $0 [options]

Options:
  -t, --tag tag
  	Specify the tag to download
	Available: latest, v1.0.0, v0.0.2, ...
	Default: latest

  -d, --dir DIR
	Specify the installation directory
	Default: /usr/local/bin
	(NOTE: I don't recommend changing this as it causes bugs when used with chroot/arch-chroot)

  -y, --noconfirm
	Don't ask for confirmation
	Default: false

  -r, --rmdeps
	Remove build dependencies after installation
	Default: false
	NOTE: Not removing build dependencies will make future updates faster

  -q, --quiet
	Quiet mode (no output)
	Default: false
	NOTE: This will still print errors if any occur

  --dry-run
	Don't actually install anything
	Default: false

  -h, --help
	Show this help message and exit

Examples:
  $0 -y
	Installs the latest version of $pkgname in /usr/local/bin without confirmation

  $0 -t v0.0.1
	Installs $pkgname v0.0.1 in /usr/local/bin
EOF
}

parse_args() {
	if [[ "$*" =~ -t|--tag ]]; then
		set -- "$@" --tag $tag
	fi

	while test $# -gt 0; do
		case $1 in
		-t | --tag)
			is_valid_tag "$2" || throw "Invalid tag format: $2" echo
			tag="$2"
			shift
			;;
		-d | --dir)
			dir_exists "$2" || throw "Invalid directory: $2" echo
			install_dir="$2"
			shift
			;;
		-y | --noconfirm)
			noconfirm=true
			;;
		-r | --rmdeps)
			rmdeps=true
			;;
		-q | --quiet)
			quiet=true
			;;
		--dry-run)
			dry_run=true
			;;
		-h | --help)
			show_help
			exit
			;;
		esac
		shift
	done
}

init() {
	#shellcheck source=utils
	source scripts/utils

	set -e
	clear

	need arch-install-scripts
	need git
	need mold
	need -b unzip
	need -b jq
	need -b curl
	install_dependencies

	# install options
	tag="latest"
	install_dir="/usr/local/bin"

	# internal use
	pkgname="aurbuilder"
	repo="sirius-red/${pkgname}"
	file_ext="zip"

	parse_args "$@"
}

run() {
	local workdir zipfile download_url download_tag

	workdir="/tmp/${pkgname}-$$"
	zipfile="${workdir}/$pkgname.${file_ext}"

	set_download_data download_tag download_url

	if [ "$tag" == "latest" ]; then
		download_tag+=" $(green_bold "(latest)")"
	elif [[ "$tag" =~ -dev$ ]]; then
		download_tag+=" $(yellow_bold "(unstable)")"
	fi

	print
	print "$(magenta_bold "$(upper "$pkgname installer")")"
	print
	print "Version: $(blue_bold "$download_tag")"
	print "Repo: $(blue_bold $repo)"
	print "Download url: $(blue_bold "$download_url")"
	print "Install dir: $(blue_bold "$install_dir")"
	print

	[ "$noconfirm" = true ] || confirm "Continue?" || exit 1

	dry_run || install "$download_url" "$workdir" "$zipfile"

	[ -z "$rmdeps" ] || remove_dependencies --dev
}

if init "$@" && run; then
	green_bold "Done!"
else
	red_bold "An error occurred!"
fi
